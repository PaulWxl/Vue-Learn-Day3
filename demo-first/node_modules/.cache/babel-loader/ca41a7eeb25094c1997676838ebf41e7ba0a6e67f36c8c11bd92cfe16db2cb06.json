{"ast":null,"code":"const ipt = document.querySelector('input');\n// 默认 导出, 这是 固定 写法！没有 为啥！！！\n// script 中 一上来， 必须 写 默认导出！！！ 固定 写法！没有 为啥！！！\n// export default {}\nexport default {\n  // 定义一个 data 数据源\n  //  Vue 官方 规定， .vue 组件 中 的 data 不能 指向 对象。 而 应该 是 一个 函数！！！而且 ，这个 函数 内部 必须 return 一个 对象。 {}。  对象 {} 内部 就是  数据。 \n  data() {\n    return {\n      username: ''\n    };\n  },\n  methods: {\n    changeName() {\n      console.log(this); // this 是 Vue 组件 的 一个 实例 ， this 具有 data ， 和 methods 中 的 方法， 可以 直接 调用。 \n      let value = ipt.value;\n      this.username = value;\n    }\n  },\n  // 当前组件中的侦听器 ， 与 methods 平级 \n  watch: {},\n  // 当前组件中的计算属性\n  computed: {},\n  // 过滤器\n  filters: {}\n};","map":{"version":3,"names":["ipt","document","querySelector","data","username","methods","changeName","console","log","value","watch","computed","filters"],"sources":["src/Test.vue"],"sourcesContent":["<template>\r\n    <!-- 注意，所以东西 一定 要放在 div 盒子 里面 (div 和 div id=\"app\" 替换 ) -->\r\n    <div class=\"test-box\">\r\n        <h3>这是用户自定义的 Test.vue {{ username }} </h3> <hr>\r\n        <h2>这是h2</h2> <hr>\r\n        <label for=\"username\"></label>\r\n        <input type=\"text\" name=\"username\" id=\"username\" placeholder=\"请输入用户名\" v-model.lazy=\"username\" >\r\n\r\n        <button @click=\"changeName\">修改用户名</button>\r\n\r\n        <div>\r\n            <span>123</span>\r\n            <span>456</span>\r\n            <span>789</span>\r\n        </div>\r\n    </div>\r\n    <!-- <div>123</div> --><!--模板中 只能 允许 有一个 根节点。 解决方法： 再在 外面 统一的 包 一个 大的 div 。  今后在开发的 时候， 为了防止报错， 一进到 template 中 ， 第一件事 就是 放 div 占位， 然后 在 这个 div 内部 写结构。  -->\r\n</template>\r\n\r\n<!-- vue 组件的三个组成部分每个.vue 组件都由3 部分构成，分别是：template-> 组件的模板结构script-> 组件的JavaScript 行为style-> 组件的样式其中，每个组件中必须包含template 模板结构，而script 行为和style 样式是可选的组成部分。 -->\r\n<!-- 一般 都是 template 在最上面， style 在 最下面， 中间是 script 。  -->\r\n\r\n\r\n<!-- script 定义 组件 的 行为  -->\r\n<script>\r\n\r\n    const ipt =  document.querySelector('input')\r\n    // 默认 导出, 这是 固定 写法！没有 为啥！！！\r\n    // script 中 一上来， 必须 写 默认导出！！！ 固定 写法！没有 为啥！！！\r\n    // export default {}\r\n    export default  {\r\n        // 定义一个 data 数据源\r\n        //  Vue 官方 规定， .vue 组件 中 的 data 不能 指向 对象。 而 应该 是 一个 函数！！！而且 ，这个 函数 内部 必须 return 一个 对象。 {}。  对象 {} 内部 就是  数据。 \r\n        data() {\r\n            return {\r\n                username: ''\r\n            }\r\n        },\r\n\r\n        methods: {\r\n            changeName() {\r\n                console.log(this)// this 是 Vue 组件 的 一个 实例 ， this 具有 data ， 和 methods 中 的 方法， 可以 直接 调用。 \r\n                let value = ipt.value\r\n                this.username = value\r\n            }\r\n        },\r\n\r\n        // 当前组件中的侦听器 ， 与 methods 平级 \r\n        watch: {\r\n\r\n        },\r\n\r\n        // 当前组件中的计算属性\r\n        computed: {\r\n\r\n        },\r\n\r\n        // 过滤器\r\n        filters: {\r\n\r\n        }\r\n    }\r\n</script>\r\n\r\n\r\n\r\n<!-- 和 template 平级， 放一个 style 标签  -->\r\n<style lang=\"less\">\r\n    \r\n    .test-box {\r\n        background-color: pink;\r\n        display: flex;\r\n        justify-content: flex-start;\r\n        h3 {\r\n            font-size: 2rem;\r\n            font-family: Arial, Helvetica, sans-serif;\r\n        }\r\n        h2 {\r\n            color: red;\r\n        }\r\n    }\r\n</style>"],"mappings":"AA0BA,MAAAA,GAAA,GAAAC,QAAA,CAAAC,aAAA;AACA;AACA;AACA;AACA;EACA;EACA;EACAC,KAAA;IACA;MACAC,QAAA;IACA;EACA;EAEAC,OAAA;IACAC,WAAA;MACAC,OAAA,CAAAC,GAAA;MACA,IAAAC,KAAA,GAAAT,GAAA,CAAAS,KAAA;MACA,KAAAL,QAAA,GAAAK,KAAA;IACA;EACA;EAEA;EACAC,KAAA,GAEA;EAEA;EACAC,QAAA,GAEA;EAEA;EACAC,OAAA,GAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}